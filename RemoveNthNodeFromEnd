Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz



class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
      int l=0;
        ListNode curr=head;
      if(head==null){
        return null;
      }
      while(curr!=null)
      {
        l++;
        curr=curr.next;
      }
      if(l<n){
        return null;
      }
      if(l==n){
        return head.next;
      }
      else
      {
        int d=l-n;
        ListNode prev=null;
        ListNode temp=head;
        for(int i = 0; i < d; i++)
        {
            prev = temp;         
            temp = temp.next;     
        }
         prev.next = temp.next;
        return head;
      }
}
